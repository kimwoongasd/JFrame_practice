GUI(Graphic User Interface)
- 화면이 있는 프로그래밍

CUI(Character User Interface)
- 화면이 없는 프로그래밍

- GUI
- 에외처리
- 쓰레드
- 파일처리
- 네트워크프로그래밍
- 데이터베이스 연결 프로그래밍


------------------------------------
컬렉션 프레임워크
1. Set : 중복 허용 x
2. LIst	: 중복 허용
3. Map	: 인덱스 대신에 key에 의해 데이터에 접근하는 방식(사전 자료형)


------------------------------------------------------------

날짜와 시간에 대한 처리
1. Date
2. Calendar
	- 년도 구할 떄 + 1900 안해도됨
3. GregorianCalender


GregorianCalendar
- Calendar를 상속한다
- Calendar와 달리 객체생성 가능
- 윤년을 boolean으로 구분가능 (isLeapYear)

Arrays
- 속성이 없다
- 객체 생성 불필요

이분검색
- 정렬이 되어있어야 한다



에외처리
- 사용자의 부주의 등으로 예외가 발생되었지만 예외처리를 하지 않으면 프로그램의 신뢰도 하락

예외(Exception)
- 프로그램 실행 중에 사용자의 부주의 등으로 인하여
  발생하는 예기치 않은 상황을 말한다
- 자바는 일반적인 예외는 이미 클래스가 만들어져있다
	 * java 공식문서 java.lang의 Exception Summary를 보고 확인가능
- 예기치 않은 상황이 오면 예외객체를 만든다

예외 처리하는 방법
- 예외 발생할만한 명령들을 try문을 사용한다
  예외가 발생하였을 떄 처리할 명령들을 catch 절에 쓴다
try {
	예외 발생할만한 명령
} catch(예외 자료형 e(변수명)) {
	예외처리문
} finally {
	예외가 발생하거나 정상적이어도 반드시 동작시킬 명령
}
- 하나의 try문에 여러개의 catch가 올 수 있다
- catch 절을 사용할 때는 범위가 작은 순 즉 자식클래스 부터 와야한다
- 예외자료형의 Object, Throwable, Exception 순으로 크다
- 메소드 안에서 예외가 발생이 될떄 예외처리를 메소드 호출하는 쪽으로 잔파하기 위해 사영



public static void main(String[] args)
- 프로그램 실행시에 필요하다면 main메소드한테 값을 전달할 수 있다
- 이 전달값이 String[] args에 전달이 된다


RuntimeException
- 실행시에 발생하는 예외
- RuntimeException의 후손들은 직접 예외하지 않아도 자바가 직접 예외처리 해준다
-  RuntimeException의 후손이 아닌 예외들은 사용자가 반드시 예외처리를 해준다

java.io : 입출력 클래스
java.sql : 데이터베이스 관련 클래스들
java.net : 네트워크 관련 클래스들
- 이 세개의 패키지 속에 있는 대부분의 클래스들의 생성자 메소드들은 거의 예외를 가지고 있다
- 예외처리를 하지 않고 맡긴다

public 리턴타임 메소드이름 (매개변수) throws 예외클래스 .....




