** static 키워드에 대하여 설명
- 클래스의 맴버변수와 메소드명 앞에 올 수 있다
- 객체와 무관하게 사용할 목적으로 사용
- static을 사용하면 객체를 생성하지 않고 바로 접근이 가능하다
- 클래스변수, 클래스메소드라고 부른다


** final에 대해서 설명하시오
- final을 변수에 붙이면 상수가 된다
- final를 붙이면 메소드는 오버라이딩을 하지 못하고
- 클래스는 상속을 못하고 상수는 값을 변경하지 못한다
- 상수는 초기값이 있어야 한다

valueOf == 어떤 값이라도 String으로 변경


String의 특징
- 불변으로써 변하지 않는 문자열 처리에 적합
- String 객체에 문자열을 변경하면 객체가 변경되는 것이 아니라
  새로운 객체를 만들어 그곳을 참조변수가 다시 가리키게 된다
  - 이 때 더이상 참조되지 않는 이전의 객체는 가비지(쓰레기)가 되기 때문에 변하는 문자열에 부적합
- 변하는 문자열처리는 StringBuffer, StringBuilder를 사용

많은 양의 데이터를 처리를 위해서는 배열을 이용한다
배열은 자료형과 크기가 고정되어있다.
이러한 단점을 보안한 것이 "칼렉션프레임워크"이다 (동적 배열이라고 할 수 있다)

컬력센프레임워크
- 인터페이스로 만들었다
1. Set : 데이터의 중복을 허용하지 않는다
	- HashSet
		* 순서를 안지킨다
	- LinkedHashSet
		* 순서를 유지
	- TreeSet
		* 자동으로 정렬한다
2. List	: 데이터의 중복을 허용
	- ArrayList
		* 배열대신 가장 많이 사용
		* 이미 있는 컬렉션으로 리스트를 만들 수 있다
		* 순서를 유지
		* 여러가지 자료형을 담을 수 있다
	- LinkedList
3. Map



제네릭
- 컬렉션프레임워크를 사용할 떄 다양한 자료형을 담는 것을 권장하지 않는다
- 컬렉션에 담는 자료형을 제한하는 것을 제네릭이라 한다

ArrayList list = new ArrayList(); --> 다양한 자료형 담을 수 있음
ArrayList<String> list = new ArrayList<String>(); --> 리스트에 담을 자료형을 String으로 제한
ArrayList<Integer> list = new ArrayList<Integer>(); --> 리스트에 담을 자료형을 int으로 제한


HashSet<Integer> data = new HashSet<Integer>(); --> set에 담을 자료형을 정수로 제한




static
- 클래스의 맴버변수와 메소드명 앞에 올 수 있따
- ststatic을 사용하면 객체를 생성하지 않고 바로 접근이 가능하다

final
- final을 변수에 붙이면 상수가 된다 상수는 초기값이 있어야 한다
- final를 붙이면 메소드는 오버라이딩을 하지 못하고
- 클래스는 상속을 못하고 상수는 값을 변경하지 못한다

String의 특징
- 불변으로써 변하지 않는 문자열 처리에 적합
- String 객체에 문자열을 변경하면 객체가 변경되는 것이 아니라 새로운 객체를 만들어
  그 그곳을 참조변수가 다시 가리키게 된다
  * 이 때 참조되지 않는 이전의 객체는 가비지(쓰레기)가 되기 떄문에 변하는 문자열에 부적합하다
	** 가비지(더이상 참조되지 않는 메모리)**
- 변하는 문자열 처리는 Stringbuffer, StringBuilder를 사용한다

startwith : 시작 문자열을 비교 --> 결과 boolean
endwith : 끝나는 문자열을 비교 -- > 결과 boolean
toLowerCase() --> 문자열 소문자로
toUpperCase() --> 문자열 대문자로
equalsIgnoreCase --> 소문자 대문자 상관없이 값으면 true
nextLine() --> 공백 포함
replace(a, b) --> a를 b 문자열로 변환
split(a) --> 정해준 문자을 없애고 배열을 리턴한다
trim() --> 양 옆에 공백 제거

String 만들기
String.valueOf(a) --> a를 String으로 변환
a + "" --> 문자열로 바뀐다


예외처리
try {
} catch (Exception e ) {
}
- try문에서 에러가 발생하면 catch 구문으로 이동
- 에러 코드가 변수 e에 담긴다

StringBuffer
StringBuffer sb = new StringBuffer(""); 
- append : 문자열을 뒤에 더한다
- insert(index, a) : 인덱스 위치에 문자열 a를 넣는다
- reverse() : 문자열을 거꾸로


많은 양의 데이터를 처리를 위해서는 배열을 이용한다
배열은 자료형과 크기가 고정되어있다.
이러한 단점을 보안한 것이 "칼렉션프레임워크"이다 (동적 배열이라고 할 수 있다)

컬력센프레임워크
- 인터페이스로 만들었다
1. Set : 데이터의 중복을 허용하지 않는다
	- HashSet
		* 순서를 지키지 않는다
	- LinkedHashSet
		* 순서를 지킨다
	- TreeSet
		* 자동으로 정렬한다
2. List : 데이터 중복을 허용
	- ArrayList
		* 배열대신 가장 많이 사용
		* 이미 있는 컬렉션으로 리스트를 만들 수 있다
		* 순서를 유지한다
		* 여러가지 자료형을 담을 수 있다

제네릭
- 컬렉션프레임워크를 사용할 떄 다양한 자료형을 담는 것을 권장하지 않는다
- 컬렉션에 담는 자료형을 제한하는 것을 제네릭이라 한다

ArrayList list = new ArrayList(); --> 다양한 자료형 담을 수 있음
ArrayList<String> list = new ArrayList<String>(); --> 리스트에 담을 자료형을 String으로 제한
ArrayList<Integer> list = new ArrayList<Integer>(); --> 리스트에 담을 자료형을 int으로 제한
HashSet<Integer> data = new HashSet<Integer>(); --> set에 담을 자료형을 정수로 제한