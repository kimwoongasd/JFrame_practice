# final
1. 변수명 앞에 final
	- 상수처럼 값이 있어야하고 변경 불가능
2. 메소드명 앞에 final
	- 재정의(오버라이딩) 금지
3. 클래스명 앞에 final
	- 상속 금지
	
	
객체지향 프로그램의 특징
1. 은닉성(Encapsulation)
	- 외부의 다른 클래스로 부터 보호하기 위한 개념
	- 
2. 상속성(Inheritance)
- 이미 만들어진 클래스를 확장하여 새로운 클래스를 만드는 것

3. 다형성	(Polymorphism)
- 상속관계에 있을 때 자식클래스 마다 재정의된 메소드를 호출하면 동일한 메시지를 받았으니 각
  객체마다 다른게 동작
  
  
  
  
  인터페이스
- 추상메소드는 body를 구체화할 수 없다
- 인터페이스는 abstract 생략이 가능하다
- 인터페이스의 변수는 final이 생략이 가능하고 상수이다
- 상수는 값이 있어야하고 변경 불가능이다

static
- Static 키워드를 사용한다는 것은 메모리에 한번 할당되어 프로그램이 종료될 때 해제되는 것을 의미
- static은 정적맴버들은 Heap영역이 아닌 Static영역에 할당된다
- static영억에 할당된 메모리는 모든 객체가 공유한다

final
- 상수처럼 값이 있어야하고 변경 불가능
- final은 오버라이딩이 불가능하다
- final class는 상속이 안된다

객체지향 프로그램의 특징
1. 은닉성(Encapsulation)
	- 외부릐 다른 클래스로 부터 보호하기 위한 겨념
	- 
2. 상속성(Inheritance)
- 이미 만들어진 클래스를 확장하여 새로운 클래스를 만드는 것

3. 다형성	(Polymorphism)
- 상속관계에 있을 때 자식클래스 마다 재정의된 메소드를 호출하면 동일한 메시지를 받았으니 각
  객체마다 다른게 동작


String
- 보통 클래스를 사용하려면 import해야한다 String은 java.lang 패키지의 클래스들을 import하지 않고 바로 사용
- String은 문자열을 표현하기 위해서 자바가 제공하는 클래스, 참조자료형이다
- 기본자료형 처럼 쓰는것을 허용한다

char[] data 이 배열을 
String str = new String(data); 를 통해서 String으로 만들 수 있다

byte형
- 파일 입출력하거나 네트워크 토인으로 데이터를 전달할 떄에 byte형으로 변환 후 전달

charAt(int index)
- index위치의 값을 char 형으로 가져온다

lenght()
- 문자열의 길이를 가져온다

indexOf(String name)
- 특정 문자열, 문자를 찾아 index로 반환한다
- 문자열을 찾거나 문자의 유무 확인
- 값이 없을 때는 -1를 반환

lastIndexOf(String name)
- indexOf는 앞에서 부터 찾지만 lastIndexOf는 뒤에서 부터 찾는다


Integer.parseInt(String str)
- 해당 문자를 정수로 변환해 준다

Double.parseDouble(String str)
- 해당 문자를 실수로 변환해 준다

substring(start index, endindex)
- 시작 인덱스부터 마지막 인덱스 -1 까지 문자열을 잘라 반환한다
- 시작인덱스를 생략하면 처음 부터 설정한 인덱스까지 문자열을 반환


Date 
- 날짜와 시간 정보 클래스이다
- 현재연도를 구할 떄 +1900 해야함
***
Date today = new Date();
// 자동으로 toString 실행
System.out.println(today);
***




----------------------------------------------------------------------------


public class ValidJumin2 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		String jumin;
		System.out.println("주민번호 입력==>");
		jumin = sc.next();
		//800101-1234567
		
		// 주민번호 마지막번호 구하기
		int check = Integer.parseInt(jumin.substring(13, 14));
		// 반복문 돌면서 곱할 숫자
		int []arr = {2,3,4,5,6,7,0,8,9,2,3,4,5};
		int sum = 0;
		
		// 반복문을 통해 총합 구하기
		for(int i=0; i<jumin.length()-1; i++) {
			// "-" 은 제외하고 숫자 곱하기
			if(i != 6) {
				// substring를 통해 원하는 자리를 잘라서 숫자로 사용
				int n = Integer.parseInt(jumin.substring(i, i+1));
				// 총합 구하기
				sum += n * arr[i];
			}
		}
		
		// 마지막 번호와 비교할 숫자 구하기
		sum = sum % 11;
		sum = 11 - sum;
		
		// 10이 넘으면 10일 떄 0 11일 때 1
		if(sum ==  10) {
			sum = 0;
		}
		if(sum == 11) {
			sum = 1;
		}
		
		// 마지막 주민번호와 비교
		if(sum == check) {
			System.out.println("올바른 주민번호 입니다.");
		}
		else {
			System.out.println("올바른 주민번호가 아닙니다.");
		}
	}

}