1. 예외
- 프로그램 수행중에 사용자의 부주의등으로 인하여 발생하는 예기치 않은 상황
- 이것을 처리하는 것을 예외처리

2. 예외처리
- 어떤 메소드에서 예와가 발생했을 떄 처리하는 방법
	1. 메소드 내에서 직접 try_catch로 처리
	2. 메소드 호출하는 쪽으로 예외를 전파(throws 키워드 이용)
	
	
하나의 try안에 여러개의 catch절이 올 수 있다
- 단 범위가 작은 순으로 catch절이 와야한다

3. finally
- 예외가 발생한다는 것은 문제가 발생한 것이기 때문에 catch절을 수행하고 그 이후 명령은 동작 x
- 반드시 수행시키고자 하는 명령이 있다면 finally 사용

RuntimeExcetion
- 자바는 일반적으로 일어날 수 있는 예외에 대하여 이미 클래스로 만들어져 있고 자동으로 예외객체 생성
- 예외 클래스들 중 RuntimeExcetion의 후손들은 사용자가 예외처리를 하지 않아도 자동으로 예외처리
- RuntimeExcetion으 후손이 아닌경우 반드시 예외처리해야 한다
- 예외처리 하지않으면 컴파일이 되지 않는다
	* 입출력 클래스들 = java,io 패키지
	* 네트워크 관련 클래스 = jave.net 패키지
	* 데이터베이스 연결 관련 클래스들 = java.sql 패키지의
	대부분의 생성자 및 메소드들은 예외를 갖고 있고 RuntimeExcetion의 후손이 아니다


4. throws
- 어떤 메소드안에서 예외가 발생이 될때 그 예외를 메소드 호출하는 쪽으로 전파하기 위한 키워드

5. throw
- 강제로 예외를 발생시키기 위한 키워드
- 예외는 클래스이다
- throw new 예외 클래스명(); --> 강제 에외 객체 생성 방법
- 객체를 만들고 예외처리 해야한다

사용자 정의 예외
- 사용자가 직접 예외 클래스를 만들 수 있다
- Exception를 상속받아 객체를 생성
class 예외클라스 extends Exception {
	public 예외 클래스 이ㅡㅁ(String message);
	super(messga)
}
이렇게 만든 사용자 정의 예외는 자바는 모르기 때문에

e.getMessage() --> 예외 객체로 부터 예외 메세지를 갖고옴
e.printStackTrace --> 예외가 발생한 위치를 추적해 가면서 예외가 발생한 클래스명 행번호등 출력


