# 클래스 변수 == 정적 변수
- 클래스의 맴버 변수명 앞에 static 키워드가 붙은 변수를 말한다
- 객체와 무관하게 사용할 수 있는 변수
- 모든 객체가 공용으로 사용

# 클래스 메소드 == 정적 메소드
- 클래스의 맴버 메소드명 앞에 static키워드가 붙은 메소드를 말한다
- 객체와 무관하게 사용가능한 메소드
- 클래스 이름으로 접근
- 클래스 메소드 안에서는 클래스 맴버에만 접근해야 한다


객체지향 프로그래밍의 특징
1. 은닉성
- 클래스를 구성하고 있는 속성들을 외부로부터 보호하는 것을 말한다
- 속성에 접근하기 위해서는 허락이 된 메소드를 통해서 접근하도록 한다
2. 상속성
- 이미 있는 클래스를 확장하여 새로운 클래스 만드는것을 말한다
- 코드의 재사용성을 높일 수 있다
- 개발시간 단축, 비용절감


클래스의 상속
- 이미 있는 클래스를 확장하여 새로운 클래스를 만들 수 있다
- 상속을 해준 클래스를 부모클래스, 상속을 받은 클래스를 자식 클래스라고 한다
- 자식 클래스는 부모의 모든 속성과 동작을 물려받는다
- 자식 클래스에서 부모의 맴버에 접근 가능
- 부모 private 영역에는 자식클래스가 직접 접근할 수 없다

protected
- 외부의 다른 클래스로 부터는 접근을 못하도록하고 상속받은 자식 클래스에게는 접근을 허용

class 부모 {}

class 자식 extends 부모 {
}


성속과 생성자
- 자식 클래스의 객체가 생성하면 부모 생성자가 먼저 동작하고 자식 생성자 동작

생성자
클래스 이름과 같은 이름을 가진 메소드
객체를 생성을 할 때 자동 동작
만들지 않아도 제공하는 기본생성자가 있다
생성자를 한개라도 만들면 기본생성자는 제공이 안된다
자식 생성가 동작할 때 자식의 생성자에서 별다른 문장이 없으면 부모의 기본생성자 요구
- 부모의 매개변수를 갖는 생성자를 동작시키려면 super를 이용한다
super()는 첫번째 문장에 와한다
